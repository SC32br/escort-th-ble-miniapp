/**
 * BLE API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ Escort TH-BLE
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Web Bluetooth API
 */

import { BLE_CONFIG, THBLECommand, SensorData, SensorInfo } from '@/types/sensor';

export class THBLEDevice {
  private device: BluetoothDevice | null = null;
  private server: BluetoothRemoteGATTServer | null = null;
  private service: BluetoothRemoteGATTService | null = null;
  private txCharacteristic: BluetoothRemoteGATTCharacteristic | null = null;
  private rxCharacteristic: BluetoothRemoteGATTCharacteristic | null = null;
  private responseBuffer = '';
  
  // Callbacks
  private onDataCallback?: (data: SensorData) => void;
  private onDisconnectCallback?: () => void;
  private onErrorCallback?: (error: Error) => void;

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Bluetooth API
   */
  static isSupported(): boolean {
    return typeof navigator !== 'undefined' && 
           'bluetooth' in navigator &&
           typeof (navigator.bluetooth as any).requestDevice === 'function';
  }

  /**
   * –ü–æ–∏—Å–∫ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É TH-BLE
   */
  async connect(): Promise<SensorInfo> {
    try {
      if (!THBLEDevice.isSupported()) {
        throw new Error('Web Bluetooth API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }

      // –ó–∞–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      this.device = await navigator.bluetooth.requestDevice({
        filters: [
          { namePrefix: BLE_CONFIG.DEVICE_NAME_PREFIX }
        ],
        optionalServices: [this.getServiceUUID()]
      });

      if (!this.device) {
        throw new Error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ');
      }

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GATT —Å–µ—Ä–≤–µ—Ä—É
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GATT —Å–µ—Ä–≤–µ—Ä—É...');
      const server = await this.device.gatt?.connect();
      
      if (!server) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GATT —Å–µ—Ä–≤–µ—Ä—É');
      }
      
      this.server = server;

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ BLE —Å–µ—Ä–≤–∏—Å–∞...');
      this.service = await this.server.getPrimaryService(this.getServiceUUID());

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
      this.txCharacteristic = await this.service.getCharacteristic(this.getTxUUID());
      this.rxCharacteristic = await this.service.getCharacteristic(this.getRxUUID());

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.rxCharacteristic.startNotifications();
      this.rxCharacteristic.addEventListener('characteristicvaluechanged', 
        this.handleNotification.bind(this));

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      this.device.addEventListener('gattserverdisconnected', () => {
        console.log('–î–∞—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        this.onDisconnectCallback?.();
      });

      const sensorInfo: SensorInfo = {
        id: this.device.id,
        name: this.device.name || 'Unknown',
        macAddress: this.extractMacAddress(),
        connected: true,
        lastUpdate: Date.now()
      };

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –¥–∞—Ç—á–∏–∫—É:', sensorInfo);
      return sensorInfo;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      this.onErrorCallback?.(error as Error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞
   */
  async disconnect(): Promise<void> {
    try {
      if (this.rxCharacteristic) {
        await this.rxCharacteristic.stopNotifications();
      }
      
      if (this.server?.connected) {
        this.server.disconnect();
      }

      this.device = null;
      this.server = null;
      this.service = null;
      this.txCharacteristic = null;
      this.rxCharacteristic = null;
      this.responseBuffer = '';

      console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –¥–∞—Ç—á–∏–∫–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–∞—Ç—á–∏–∫—É
   */
  private async sendCommand(command: string): Promise<string> {
    return new Promise(async (resolve, reject) => {
      try {
        if (!this.txCharacteristic) {
          throw new Error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
        }

        this.responseBuffer = '';
        const commandWithSuffix = command + BLE_CONFIG.COMMAND_SUFFIX;
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', commandWithSuffix.replace('\r', '\\r'));
        
        const encoder = new TextEncoder();
        await this.txCharacteristic.writeValue(encoder.encode(commandWithSuffix));

        // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)
        const timeout = setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'));
        }, 5000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä –∫–∞–∂–¥—ã–µ 100–º—Å
        const checkResponse = setInterval(() => {
          if (this.responseBuffer.includes(BLE_CONFIG.COMMAND_SUFFIX)) {
            clearInterval(checkResponse);
            clearTimeout(timeout);
            resolve(this.responseBuffer);
          }
        }, 100);

      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞
   */
  async getAllData(): Promise<SensorData> {
    try {
      const response = await this.sendCommand(THBLECommand.GET_ALL_DATA);
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.replace('\r', '\\r'));
      
      return this.parseDataResponse(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
   */
  async getOnlineData(): Promise<SensorData> {
    try {
      const response = await this.sendCommand(THBLECommand.GET_ONLINE_DATA);
      return this.parseDataResponse(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
   */
  async synchronizeTime(): Promise<void> {
    const timestamp = Math.floor(Date.now() / 1000);
    const command = `${THBLECommand.SYNCHRONIZE_TIME}${timestamp}`;
    await this.sendCommand(command);
  }

  /**
   * –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
   */
  async enterPassword(password: string): Promise<boolean> {
    const command = `SP,PN:1:${password},PW:1:${password}`;
    const response = await this.sendCommand(command);
    return response.includes('APO');
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async rebootDevice(): Promise<void> {
    await this.sendCommand(THBLECommand.REBOOT_DEVICE);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¥–∞—Ç—á–∏–∫–∞
   */
  private handleNotification(event: Event): void {
    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;
    const value = characteristic.value;
    
    if (!value) return;

    const decoder = new TextDecoder();
    const text = decoder.decode(value);
    
    this.responseBuffer += text;
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \r)
    if (text.includes(BLE_CONFIG.COMMAND_SUFFIX)) {
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', this.responseBuffer.replace('\r', '\\r'));
      
      // –ï—Å–ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä—Å–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º callback
      if (this.responseBuffer.startsWith('AGA') || this.responseBuffer.startsWith('AGO')) {
        try {
          const data = this.parseDataResponse(this.responseBuffer);
          this.onDataCallback?.(data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
      }
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  private parseDataResponse(response: string): SensorData {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: AGA,T:25.5,H:60,B:3.6\r
    // –¢–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–∞—Ç—á–∏–∫–∞
    
    const data: SensorData = {
      temperature: null,
      humidity: null,
      battery: null,
      timestamp: Date.now()
    };

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å
      const cleanResponse = response.replace(/^A(GA|GO)/, '').replace('\r', '');
      
      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const params = cleanResponse.split(',');
      
      params.forEach(param => {
        const [key, value] = param.split(':');
        
        switch(key?.trim()) {
          case 'T':
            data.temperature = parseFloat(value);
            break;
          case 'H':
            data.humidity = parseInt(value);
            break;
          case 'B':
            data.battery = parseFloat(value);
            break;
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error);
    }

    return data;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ MAC –∞–¥—Ä–µ—Å–∞ –∏–∑ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private extractMacAddress(): string {
    if (!this.device?.name) return 'Unknown';
    
    // –ò–º—è —Ñ–æ—Ä–º–∞—Ç–∞ "TH_XXXXXX"
    const parts = this.device.name.split('_');
    return parts.length > 1 ? parts[1] : 'Unknown';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ UUID —Å–µ—Ä–≤–∏—Å–∞ (–¥–æ–±–∞–≤–ª—è–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
   */
  private getServiceUUID(): string {
    const deviceId = this.extractDeviceId();
    return BLE_CONFIG.SERVICE_UUID_PREFIX + deviceId;
  }

  private getTxUUID(): string {
    const deviceId = this.extractDeviceId();
    return BLE_CONFIG.TX_CHARACTERISTIC_PREFIX + deviceId;
  }

  private getRxUUID(): string {
    const deviceId = this.extractDeviceId();
    return BLE_CONFIG.RX_CHARACTERISTIC_PREFIX + deviceId;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è UUID
   */
  private extractDeviceId(): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UUID —Å—É—Ñ—Ñ–∏–∫—Å
    return 'E26A39F7C831';
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback'–æ–≤
   */
  onData(callback: (data: SensorData) => void): void {
    this.onDataCallback = callback;
  }

  onDisconnect(callback: () => void): void {
    this.onDisconnectCallback = callback;
  }

  onError(callback: (error: Error) => void): void {
    this.onErrorCallback = callback;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  isConnected(): boolean {
    return this.server?.connected || false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
   */
  getDeviceInfo(): SensorInfo | null {
    if (!this.device) return null;

    return {
      id: this.device.id,
      name: this.device.name || 'Unknown',
      macAddress: this.extractMacAddress(),
      connected: this.isConnected(),
      lastUpdate: Date.now()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const bleDevice = new THBLEDevice();

