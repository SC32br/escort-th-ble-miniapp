/**
 * –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
 */
export function formatTemperature(temp: number | null): string {
  if (temp === null || temp === undefined) return '‚Äî';
  return `${temp.toFixed(1)}¬∞C`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
 */
export function formatHumidity(humidity: number | null): string {
  if (humidity === null || humidity === undefined) return '‚Äî';
  return `${humidity}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
 */
export function formatBattery(voltage: number | null): string {
  if (voltage === null || voltage === undefined) return '‚Äî';
  return `${voltage.toFixed(2)}V`;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –±–∞—Ç–∞—Ä–µ–∏ –ø–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—é
 * –î–ª—è –±–∞—Ç–∞—Ä–µ–π–∫–∏ —Ç–∏–ø–∞ Saft LS17500 (3.6V –Ω–æ–º–∏–Ω–∞–ª)
 */
export function getBatteryPercentage(voltage: number | null): number {
  if (voltage === null || voltage === undefined) return 0;
  
  const minVoltage = 2.5;
  const maxVoltage = 3.6;
  
  if (voltage <= minVoltage) return 0;
  if (voltage >= maxVoltage) return 100;
  
  return Math.round(((voltage - minVoltage) / (maxVoltage - minVoltage)) * 100);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –±–∞—Ç–∞—Ä–µ–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
 */
export function getBatteryIcon(percentage: number): string {
  if (percentage > 75) return 'üîã';
  if (percentage > 50) return 'üîã';
  if (percentage > 25) return 'ü™´';
  if (percentage > 10) return 'ü™´';
  return 'ü™´';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –±–∞—Ç–∞—Ä–µ–∏
 */
export function getBatteryColor(percentage: number): string {
  if (percentage > 50) return 'text-green-500';
  if (percentage > 25) return 'text-yellow-500';
  if (percentage > 10) return 'text-orange-500';
  return 'text-red-500';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
export function formatDateTime(timestamp: number): string {
  const date = new Date(timestamp);
  
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  
  return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
export function formatTime(timestamp: number): string {
  const date = new Date(timestamp);
  
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  
  return `${hours}:${minutes}:${seconds}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
export function formatRelativeTime(timestamp: number): string {
  const now = Date.now();
  const diff = now - timestamp;
  
  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
  if (hours > 0) return `${hours} —á. –Ω–∞–∑–∞–¥`;
  if (minutes > 0) return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  if (seconds > 0) return `${seconds} —Å–µ–∫. –Ω–∞–∑–∞–¥`;
  return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function getConnectionStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    'disconnected': '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ',
    'connecting': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    'connected': '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
    'error': '–û—à–∏–±–∫–∞'
  };
  
  return statusMap[status] || status;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function getConnectionStatusColor(status: string): string {
  const colorMap: Record<string, string> = {
    'disconnected': 'text-gray-500',
    'connecting': 'text-blue-500',
    'connected': 'text-green-500',
    'error': 'text-red-500'
  };
  
  return colorMap[status] || 'text-gray-500';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAC –∞–¥—Ä–µ—Å–∞
 */
export function formatMacAddress(mac: string): string {
  if (!mac || mac === 'Unknown') return '‚Äî';
  
  // –ï—Å–ª–∏ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
  if (mac.includes(':')) return mac.toUpperCase();
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
  return mac.match(/.{1,2}/g)?.join(':').toUpperCase() || mac;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
 */
export function getTemperatureColor(temp: number | null): string {
  if (temp === null || temp === undefined) return 'text-gray-500';
  
  if (temp < 0) return 'text-blue-600';
  if (temp < 15) return 'text-blue-400';
  if (temp < 25) return 'text-green-500';
  if (temp < 35) return 'text-yellow-500';
  return 'text-red-500';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
 */
export function getHumidityColor(humidity: number | null): string {
  if (humidity === null || humidity === undefined) return 'text-gray-500';
  
  if (humidity < 30) return 'text-yellow-600';
  if (humidity < 70) return 'text-green-500';
  return 'text-blue-500';
}

